version: 2

jobs:
  build:
    docker:
      - image: calebhurd/hello-world:latest
    steps:
      - checkout
  docker_push:
    # Build app container and push it to the GCR registry
    # Note: we want to build and push an image with tags based on both
    # the Git commit hash AND the branch name. This way, we can refer to
    # images by commit (which is immutable) or branch name (which
    # dynamically tracks the latest build for each branch).
    docker:
      - image: bayesimpact/circleci
#      - image: calebhurd/hello-world:latest
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install Docker
          command: echo "${DOCKER_PASSWORD}" | docker login -u ${DOCKER_USERNAME} --password-stdin
      - run:
          name: Authenticate with Docker
          command: echo "${DOCKER_PASSWORD}" | docker login -u ${DOCKER_USERNAME} --password-stdin
      - run:
          name: Build app image
          command: docker build --rm=false -t hello-world:latest -t hello-world:latest -f ./Dockerfile .
      - run:
          name: Tag the container
          command: docker tag hello-world:latest calebhurd/hello-world:latest
      - run:
          name: Lets see docker images locally
          command: docker images
      - run:
          name: Push app image
          command: docker push calebhurd/hello-world:latest
  kubernetes_deploy:
    # Update the existing Kubernetes deployment to point to the new image
    docker:
      - image: google/cloud-sdk:alpine
    working_directory: ~/repo
    steps:
      - run:
          name: Deploy the current commit on this branch to the GKE cluster
          command: |
            gcloud components install kubectl
            echo "${GKE_CD_SERVICE_ACCOUNT_KEY}" > .key.json
            gcloud auth activate-service-account --key-file .key.json
            gcloud config set compute/zone "${GKE_ZONE}"
            gcloud config set project "${GKE_PROJECT}"
            gcloud container clusters get-credentials "${GKE_CLUSTER}" --zone "${GKE_ZONE}"
            kubectl apply -f https://raw.githubusercontent.com/coffeesn0b/hello-world-go/master/helloworld.yaml
workflows:
  version: 2
  build:
    jobs:
      # note: skip tests on prod and staging branches.
      # This assumes your workflow ensures that tests pass in the dev branch
      # before the code is promoted to staging.
      - build:
          filters:
            branches:
              ignore:
                - prod
                - staging
  deploy:
    jobs:
      # note: this step only runs on prod and staging branches.
      - docker_push:
          filters:
            branches:
              only:
                - prod
                - staging
                - master
      - kubernetes_deploy:
          filters:
            branches:
              only:
                - prod
                - staging
                - master
          requires:
            - docker_push
